<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"  >
	
	<!-- <task:annotation-driven/> -->
	<context:annotation-config />
	<context:component-scan base-package="com.cc.buildingReform" >
	</context:component-scan>
	
	<!-- <bean id="jobs" class="com.cc.buildingReform.controller.Jobs"></bean>  

	<task:scheduled-tasks>  
	    <task:scheduled ref="jobs" method="weather" cron="* * 5 * * ?" />
	</task:scheduled-tasks>
	
	<task:scheduled-tasks>  
	    <task:scheduled ref="jobs" method="statistic" cron="* * 2 * * ?" />
	</task:scheduled-tasks> -->
	
	<aop:config proxy-target-class="true">
		<aop:aspect id="aspect" ref="aop">
		   	<aop:pointcut id="pointcut" expression="execution(* com.cc.buildingReform.controller.*.*(..))" />
		   	<aop:before pointcut-ref="pointcut" method="before" />
		   	<aop:around pointcut-ref="pointcut" method="around"/>
		   	<aop:after pointcut-ref="pointcut" method="after" />
	  	</aop:aspect>
	</aop:config>
	<bean id="aop" class="com.cc.buildingReform.Aspect.Aop"></bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
     
    <bean id="viewResolver"
       class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix" value="/" />
       <property name="suffix" value=".jsp" />
    </bean>

	<!-- 启动JSON格式的配置 -->
    <bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <!-- 解决 HttpMediaTypeNotAcceptableException: Could not find acceptable representation -->
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<context:property-placeholder location="/WEB-INF/jdbc.properties" ignore-unresolvable="true"  />  
	<context:property-placeholder location="/WEB-INF/server.properties" ignore-unresolvable="true" file-encoding="UTF-8" />  

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
       <property name="driverClassName">  
           <value>${jdbc.driverClassName}</value>  
       </property>  
       <property name="url">  
           <value>${jdbc.url}</value>  
       </property>  
       <property name="username">  
           <value>${jdbc.username}</value>  
       </property>  
       <property name="password">  
           <value>${jdbc.password}</value>  
       </property>  
    </bean>
		
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<tx:annotation-driven />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="readPropertiesServer" class="com.cc.buildingReform.Common.ServerProperty">
		<property name="userPassword">  
           <value>${server.userPassword}</value>  
       	</property>
       	<property name="path">  
           <value>${server.path}</value>  
       	</property> 
	</bean>	
	
	<!-- 验证码 -->
	<bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.border.color">red</prop>  
                        <prop key="kaptcha.border.thickness">5</prop>
                        <prop key="kaptcha.image.width">80</prop>  
                        <prop key="kaptcha.image.height">31</prop>  
                        <prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.DefaultTextCreator</prop>
                        <prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>  
                        <prop key="kaptcha.textproducer.font.size">23</prop>  
                        <prop key="kaptcha.textproducer.font.color">blue</prop>  
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <prop key="kaptcha.noise.color">black</prop>  
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>  
                        <prop key="kaptcha.background.impl">com.google.code.kaptcha.impl.DefaultBackground</prop>  
                        <prop key="kaptcha.background.clear.to">white</prop>  
                        <prop key="kaptcha.word.impl">com.google.code.kaptcha.text.impl.DefaultWordRenderer</prop>  
                        <prop key="kaptcha.session.key">code</prop>
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
</beans>